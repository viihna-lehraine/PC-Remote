name: CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build-test:
        name: Build & Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up PNPM
              uses: pnpm/action-setup@v3

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'pnpm'
                  cache-dependency-path: 'pnpm-lock.yaml, frontend/pnpm-lock.yaml, backend/pnpm-lock.yaml'

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile || (echo "Failed to install dependencies" && exit 1)

            - name: Cache pnpm modules
              uses: actions/cache@v2
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: Build frontend
              run: pnpm --filter frontend run build > frontend_build.log || (echo "Build failed ‚ùå" && exit 1)

            - name: Build backend
              run: pnpm --filter backend run build > backend_build.log || (echo "Build failed ‚ùå" && exit 1)

            - name: Upload build logs
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: build-logs
                  path: |
                      frontend_build.log
                      backend_build.log

            - name: Install jq
              run: sudo apt-get install jq

            - name: Notify Discord on success
              if: success()
              run: |
                  BUILD_TIME=$(TZ="America/New_York" date +"%Y-%m-%dT%H:%M:%SZ")
                  curl -H "Content-Type: application/json" -X POST -d "$(jq -n --arg time "$BUILD_TIME" --arg sha "${{ github.sha }}" --arg actor "${{ github.actor }}" --arg branch "${{ github.ref_name }}" --arg msg "${{ github.event.head_commit.message || 'No commit message' }}" --arg url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" '{
                    embeds: [{
                  title: "‚úÖ PC Remote Build Succeeded",
                  color: 65280,
                  fields: [
                    { name: "Commit", value: "[`\($sha)`](https://github.com/${{ github.repository }}/commit/\($sha))", inline: false },
                    { name: "Message", value: "\($msg)", inline: false },
                    { name: "By", value: "\($actor)", inline: true },
                    { name: "Branch", value: "\($branch)", inline: true },
                    { name: "Started At", value: "\($time)", inline: false },
                    { name: "Logs", value: "[üîç View Logs](\($url))", inline: false }
                  ]
                    }]
                      }')" ${{ secrets.DISCORD_WEBHOOK }}

            - name: Notify Discord on failure
              if: failure()
              run: |
                  BUILD_TIME=$(TZ="America/New_York" date +"%Y-%m-%dT%H:%M:%SZ")
                  curl -H "Content-Type: application/json" -X POST -d "$(jq -n --arg time "$BUILD_TIME" --arg sha "${{ github.sha }}" --arg actor "${{ github.actor }}" --arg branch "${{ github.ref_name }}" --arg msg "${{ github.event.head_commit.message || 'No commit message' }}" --arg url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" '{
                    embeds: [{
                      title: "‚ùå PC Remote Build Failed",
                  color: 16711680,
                  fields: [
                    { name: "Commit", value: "[`\($sha)`](https://github.com/${{ github.repository }}/commit/\($sha))", inline: false },
                    { name: "Message", value: "\($msg)", inline: false },
                    { name: "By", value: "\($actor)", inline: true },
                    { name: "Branch", value: "\($branch)", inline: true },
                    { name: "Started At", value: "\($time)", inline: false },
                    { name: "Logs", value: "[üîç View Logs](\($url))", inline: false }
                  ]
                    }]
                       }')" ${{ secrets.DISCORD_WEBHOOK }}
